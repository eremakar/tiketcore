// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ticketing.Data.TicketDb.DatabaseContext;

#nullable disable

namespace Ticketing.Migrations
{
    [DbContext(typeof(TicketDbContext))]
    [Migration("20250929194801_SeatTariffItem")]
    partial class SeatTariffItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeatCountReservationSeatCountSegment", b =>
                {
                    b.Property<long>("SeatCountReservationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SegmentsId")
                        .HasColumnType("bigint");

                    b.HasKey("SeatCountReservationId", "SegmentsId");

                    b.HasIndex("SegmentsId");

                    b.ToTable("SeatCountReservationSeatCountSegment");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Connection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("DistanceKm")
                        .HasColumnType("double precision");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Depot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("StationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("Depots");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Railway", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortCode")
                        .HasColumnType("text");

                    b.Property<int>("TimeDifferenceFromAdministration")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Railwaies");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.RailwayStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long?>("RailwayId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RailwayId");

                    b.HasIndex("StationId");

                    b.ToTable("RailwayStations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.RouteStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Arrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Stop")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("StationId");

                    b.ToTable("RouteStations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Seat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("WagonId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatCountReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<string>("Total")
                        .HasColumnType("text");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainScheduleId");

                    b.HasIndex("WagonId");

                    b.ToTable("SeatCountReservations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatCountSegment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("FreeCount")
                        .HasColumnType("integer");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.Property<string>("Tickets")
                        .HasColumnType("jsonb");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainScheduleId");

                    b.HasIndex("WagonId");

                    b.ToTable("SeatCountSegments");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long?>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<string>("Total")
                        .HasColumnType("text");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ToId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainScheduleId");

                    b.HasIndex("WagonId");

                    b.ToTable("SeatReservations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatSegment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long?>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeatReservationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SeatReservationId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainScheduleId");

                    b.HasIndex("WagonId");

                    b.ToTable("SeatSegments");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("TarifCoefficient")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("SeatTypes");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CityCode")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Depots")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsCity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSalePoint")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("ShortNameLatin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.BaseFare", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BaseFares");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("TarifCoefficient")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BaseFareId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("TrainCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BaseFareId");

                    b.HasIndex("TrainCategoryId");

                    b.HasIndex("TrainId");

                    b.ToTable("SeatTariffs");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariffHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BaseFareId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConnectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeatTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonClassId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BaseFareId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("TrainCategoryId");

                    b.HasIndex("TrainId");

                    b.HasIndex("WagonClassId");

                    b.ToTable("SeatTariffHistories");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariffItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeatTariffId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeatTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonClassId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeatTariffId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("ToId");

                    b.HasIndex("WagonClassId");

                    b.ToTable("SeatTariffItems");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.TrainCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("TarifCoefficient")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TrainCategories");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.WagonClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("TarifCoefficient")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("WagonClasses");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSeat")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long?>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<string>("Total")
                        .HasColumnType("text");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainScheduleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ToId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainScheduleId");

                    b.HasIndex("WagonId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TicketPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketPayments");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TicketService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("TicketId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketServices");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TicketState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketStates");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Train", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("PlanId");

                    b.HasIndex("RouteId");

                    b.HasIndex("ToId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.ToTable("TrainSchedules");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<long?>("TrainScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainScheduleId");

                    b.HasIndex("WagonId");

                    b.ToTable("TrainWagons");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagonsPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.ToTable("TrainWagonsPlans");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagonsPlanWagon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<long?>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WagonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("WagonId");

                    b.ToTable("TrainWagonsPlanWagons");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("BlockExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PinCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("PinCodeExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<int>("ProtectFromBruteforceAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("PushToken")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationToken")
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SignalrToken")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Wagon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<string>("PictureS3")
                        .HasColumnType("jsonb");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Wagons");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.WagonType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WagonTypes");
                });

            modelBuilder.Entity("SeatCountReservationSeatCountSegment", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.SeatCountReservation", null)
                        .WithMany()
                        .HasForeignKey("SeatCountReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing.Data.TicketDb.Entities.SeatCountSegment", null)
                        .WithMany()
                        .HasForeignKey("SegmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Connection", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Depot", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.RailwayStation", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Railway", "Railway")
                        .WithMany("Stations")
                        .HasForeignKey("RailwayId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.Navigation("Railway");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Route", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.RouteStation", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Route", "Route")
                        .WithMany("Stations")
                        .HasForeignKey("RouteId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Seat", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.SeatType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagon", "Wagon")
                        .WithMany("Seats")
                        .HasForeignKey("WagonId");

                    b.Navigation("Type");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatCountReservation", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainSchedule", "TrainSchedule")
                        .WithMany()
                        .HasForeignKey("TrainScheduleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("From");

                    b.Navigation("To");

                    b.Navigation("Train");

                    b.Navigation("TrainSchedule");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatCountSegment", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainSchedule", "TrainSchedule")
                        .WithMany()
                        .HasForeignKey("TrainScheduleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("From");

                    b.Navigation("To");

                    b.Navigation("Train");

                    b.Navigation("TrainSchedule");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatReservation", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainSchedule", "TrainSchedule")
                        .WithMany()
                        .HasForeignKey("TrainScheduleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("From");

                    b.Navigation("Seat");

                    b.Navigation("To");

                    b.Navigation("Train");

                    b.Navigation("TrainSchedule");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatSegment", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.SeatReservation", "SeatReservation")
                        .WithMany("Segments")
                        .HasForeignKey("SeatReservationId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainSchedule", "TrainSchedule")
                        .WithMany()
                        .HasForeignKey("TrainScheduleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("From");

                    b.Navigation("Seat");

                    b.Navigation("SeatReservation");

                    b.Navigation("Ticket");

                    b.Navigation("To");

                    b.Navigation("Train");

                    b.Navigation("TrainSchedule");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariff", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.BaseFare", "BaseFare")
                        .WithMany()
                        .HasForeignKey("BaseFareId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.TrainCategory", "TrainCategory")
                        .WithMany()
                        .HasForeignKey("TrainCategoryId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.Navigation("BaseFare");

                    b.Navigation("Train");

                    b.Navigation("TrainCategory");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariffHistory", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.BaseFare", "BaseFare")
                        .WithMany()
                        .HasForeignKey("BaseFareId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.SeatType", "SeatType")
                        .WithMany()
                        .HasForeignKey("SeatTypeId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.TrainCategory", "TrainCategory")
                        .WithMany()
                        .HasForeignKey("TrainCategoryId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.WagonClass", "WagonClass")
                        .WithMany()
                        .HasForeignKey("WagonClassId");

                    b.Navigation("BaseFare");

                    b.Navigation("Connection");

                    b.Navigation("Season");

                    b.Navigation("SeatType");

                    b.Navigation("Train");

                    b.Navigation("TrainCategory");

                    b.Navigation("WagonClass");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariffItem", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariff", "SeatTariff")
                        .WithMany("Items")
                        .HasForeignKey("SeatTariffId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.SeatType", "SeatType")
                        .WithMany()
                        .HasForeignKey("SeatTypeId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Tarifications.WagonClass", "WagonClass")
                        .WithMany()
                        .HasForeignKey("WagonClassId");

                    b.Navigation("From");

                    b.Navigation("Season");

                    b.Navigation("SeatTariff");

                    b.Navigation("SeatType");

                    b.Navigation("To");

                    b.Navigation("WagonClass");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Ticket", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.RouteStation", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainSchedule", "TrainSchedule")
                        .WithMany()
                        .HasForeignKey("TrainScheduleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("From");

                    b.Navigation("Seat");

                    b.Navigation("To");

                    b.Navigation("Train");

                    b.Navigation("TrainSchedule");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TicketPayment", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TicketService", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("Service");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Train", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagonsPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Station", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("Plan");

                    b.Navigation("Route");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainSchedule", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagon", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainSchedule", "TrainSchedule")
                        .WithMany()
                        .HasForeignKey("TrainScheduleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Wagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("TrainSchedule");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagonsPlan", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagonsPlanWagon", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.TrainWagonsPlan", "Plan")
                        .WithMany("Wagons")
                        .HasForeignKey("PlanId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.Wagon", "Wagon")
                        .WithMany()
                        .HasForeignKey("WagonId");

                    b.Navigation("Plan");

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.User", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.UserRole", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Ticketing.Data.TicketDb.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Wagon", b =>
                {
                    b.HasOne("Ticketing.Data.TicketDb.Entities.WagonType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Railway", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Route", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.SeatReservation", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.Tarifications.SeatTariff", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagon", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.TrainWagonsPlan", b =>
                {
                    b.Navigation("Wagons");
                });

            modelBuilder.Entity("Ticketing.Data.TicketDb.Entities.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
